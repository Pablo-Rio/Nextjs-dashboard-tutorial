IUT du Limousin
Département Métiers du Multimédia et de l'Internet
BUT 3
Evaluation Next.js


Sous chacune des questions suivantes, vous prendrez soin de décrire de manière **très** synthétique ce que vous avez
ajouté et/ou modifié pour répondre à la question.


1. Ajouter une route /dashboard/credits
   Sur la page correspondante, la sidenav est conservée et vous afficherez juste sur la partie droite le messsage :
   "Cet examen est l'oeuvre de John Doe" en remplaçant John Doe par vos prénom et nom ! Vous incluerez également
   une image en guise d'avatar. Cette image, outre le fait d'être respectable, doit être hébergée avec votre application (pas de référence externe)

Nouveau dossier avec un page.tsx pour une nouvelle route. Image dans le dossier public/credits.



2. Modifier la barre latérale de navigation pour ajouter un menu 'Crédits' en plus de 'Home', 'Invoices' et 'Customers'.
   Ce nouveau menu renverra bien entendu vers /dashboard/credits

Dans nav-links.tsx, ajout d'un nouvel objet dans le tableau links.



3. /dashboard
   Ajouter une "carte" qui indique le plus gros montant de toutes les factures déjà payées.
   Note : le composant Card a une prop 'type' pour laquelle vous utiliserez une des valeurs déjà utilisée pour les autres cartes.
   Note 2 : ce n'est pas grave si l'ajout de la carte "désorganise" un peu l'interface. Et on ne vous demande pas de modifier le cardsSkeleton en conséquence.

Dans cards.tsx, ajout d'une nouvelle carte avec comme valeur highestAmount.
highestAmount est calculé dans data.ts en faisant une requête SQL, puis mis en forme avec formatCurrency.



4. /dashboard/customers
   Afficher sur cette page la liste des clients en présentant dans une table leur identifiant, son image de profil, leur prénom et nom, leur adresse email.
   On ne vous demande pas un affichage paginé. Vous pouvez tout afficher. Par contre merci d'utiliser <Suspense>.
   Note : basez-vous sur /dashboard/invoices. Vous pouvez reprendre des composants déjà présents ou si besoin en dupliquer/modifier
   pour l'adapater aux données.

Ajout de fetchFilteredCustomers, fetchCustomersPages dans data.ts.
Modifications de customers/table.tsx pour afficher les bonnes données.
Modifications de customers/page.tsx.
Tout sur le modèle de invoices.

TODO: Faire le squelette chargement de la page.



5. /dashboard/customers
   Modifier votre affichage pour faire apparaître en plus pour chaque client le nombre de factures qu'il a déjà payé et le nombre
   de facture qu'il lui reste encore à payer.

Modification de fetchFilteredCustomers dans data.ts : changement de la requête sql pour additionner le nombre de factures
payées et non payées et pas leur montant.
Ajout des deux colonnes dans customers/table.tsx




6. /dashboard/customers
   Ajouter un bouton qui permet de saisir et enregistrer un nouveau client. Là encore, basez-vous sur /dashboard/invoices.
   Note : pour vous simplifier un peu les choses, on ne vous demande pas de gérer l'upload d'une image de profil. Vous pouvez
   directement saisir son path. Et ne perdez pas de temps à chercher des images... dupliquez et renommez celles déjà présentes.


Création du formulaire, modifications dans actions pour ajouter des infos dans la bdd